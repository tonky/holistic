// AUTOGENERATED! DO NOT EDIT.

package accounting

import (
	"tonky/holistic/infra/kafkaProducer"
	"tonky/holistic/infra/kafkaConsumer"
	"context"
	"tonky/holistic/clients/pricingClient"
	"tonky/holistic/infra/logger"

)


type Clients struct {
        PricingClient pricingClient.IPricingClient
}
type Deps struct {
	Config Config
	Logger logger.ILogger
    OrdererRepo OrdererRepository
    AccountingOrderPaidProducer kafkaProducer.IAccountingOrderPaid
    FoodOrderUpdatedConsumer kafkaConsumer.IFoodOrderUpdated
}

type App struct {
	Deps       Deps
	Logger     logger.ILogger
	Clients		Clients
}

func NewApp(deps Deps, clients Clients) (*App, error) {
	app := App{
		Deps:       deps,
		Clients: clients,
		Logger:     deps.Logger,
	}

	return &app, nil
}

func (a App) RunConsumers() {
	a.Deps.Logger.Info(">> accounting.App.RunConsumers()")

	ctx := context.Background()

	go func() {
		for err := range a.Deps.FoodOrderUpdatedConsumer.Run(ctx, a.FoodOrderUpdatedProcessor) {
			a.Deps.Logger.Warn(err.Error())
		}
	}()
}
