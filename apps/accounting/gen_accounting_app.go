// AUTOGENERATED! DO NOT EDIT.

package accounting

import (
	"tonky/holistic/infra/kafkaProducer"
	"tonky/holistic/infra/kafkaConsumer"
	"context"
	"tonky/holistic/clients/pricingClient"
	"tonky/holistic/infra/logger"

	"github.com/samber/do/v2"
)

type App struct {
	Deps       do.Injector
	logger     *logger.Slog

    OrdererRepo OrdererRepository
    AccountingOrderPaidProducer kafkaProducer.IAccountingOrderPaid
    FoodOrderUpdatedConsumer kafkaConsumer.IFoodOrderUpdated
    PricingClient pricingClient.IPricingClient
}

func NewApp(deps do.Injector) (*App, error) {
	ctx := context.Background()

	app := App{
		Deps:       deps,
		logger:     do.MustInvoke[*logger.Slog](deps),
        OrdererRepo: do.MustInvokeAs[OrdererRepository](deps),
        AccountingOrderPaidProducer: do.MustInvokeAs[kafkaProducer.IAccountingOrderPaid](deps),
        FoodOrderUpdatedConsumer: do.MustInvokeAs[kafkaConsumer.IFoodOrderUpdated](deps),
        PricingClient: do.MustInvokeAs[pricingClient.IPricingClient](deps),

	}

	go func() {
		for err := range app.FoodOrderUpdatedConsumer.Run(ctx, app.FoodOrderUpdatedProcessor) {
			app.logger.Warn(err.Error())
		}
	}()
	
	return &app, nil
}
