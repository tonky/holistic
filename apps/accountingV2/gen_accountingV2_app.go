// AUTOGENERATED! DO NOT EDIT.

package accountingV2

import (
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/slogLogger"
	"tonky/holistic/infra/kafkaProducer"
	"tonky/holistic/infra/kafkaConsumer"
	"context"
	"tonky/holistic/clients/pricingClient"
)

type Clients struct {
    PricingClient pricingClient.IPricingClient
}

type Deps struct {
	Config Config
    Logger logger.ILogger
    AccountingOrderPaidProducer kafkaProducer.IAccountingOrderPaid
    FoodOrderUpdatedConsumer kafkaConsumer.IFoodOrderUpdated
    FoodOrderer IFoodOrderer
	Clients		Clients
}

type App struct {
	Deps       Deps
}

func NewApp(deps Deps) (*App, error) {
	deps.Logger = deps.Logger.With("app", "accountingV2")

	app := App{
		Deps: deps,
	}

	return &app, nil
}

func MustDepsFromEnv() Deps {
	l := slogLogger.Default().With("app", "accountingV2")

    l.Debug("MustDepsFromenv()")

	cfg := MustEnvConfig()

	deps, err := DepsFromConf(cfg)
	if err != nil {
    	l.Error("DepsFromConf error", "config", cfg, "err", err)
	}

	return deps
}

func DepsFromConf(cfg Config) (Deps, error) {
	l := slogLogger.Default().With("app", "accountingV2")

    l.Debug("DepsFromConf()", "config", cfg)

    deps := Deps{
		Logger: l,
	}

    FoodOrderer, err := NewFoodOrderer(l, cfg.FoodOrderer)
    if err != nil {
        return deps, err
    }

    deps.FoodOrderer = FoodOrderer

	AccountingOrderPaidProducer, err := kafkaProducer.NewAccountingOrderPaidProducer(l, cfg.Kafka)
    if err != nil {
        return deps, err
    }
	deps.AccountingOrderPaidProducer = AccountingOrderPaidProducer
	FoodOrderUpdatedConsumer, err := kafkaConsumer.NewFoodOrderUpdatedConsumer(l, cfg.Kafka)
    if err != nil {
        return deps, err
    }
	deps.FoodOrderUpdatedConsumer = FoodOrderUpdatedConsumer

    deps.Clients = Clients{
        PricingClient: pricingClient.NewFromEnv(cfg.Environment),
    }

    return deps, nil
}

func (a App) RunConsumers() {
	a.Deps.Logger.Info("RunConsumers()")

	ctx := context.Background()

	go func() {
		for err := range a.Deps.FoodOrderUpdatedConsumer.Run(ctx, a.FoodOrderUpdatedProcessor) {
			a.Deps.Logger.Error(err.Error())
		}
	}()
}
