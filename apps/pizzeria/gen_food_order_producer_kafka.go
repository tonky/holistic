// AUTOGENERATED! DO NOT EDIT.
package pizzeria

import (
	"context"
	"encoding/json"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"
	"tonky/holistic/infra/kafkaProducer"

	 "tonky/holistic/domain/food"
)

// compile-time check to make sure app-level interface is implemented
var _ FoodOrderProducer = new(KafkaFoodOrderProducer) 

type FoodOrderProducer interface {
	ProduceFoodOrder(context.Context, food.Order) error
	ProduceFoodOrderBatch(context.Context, []food.Order) error
}

type KafkaFoodOrderProducer struct {
	logger logger.Slog
	client kafkaProducer.IProducer
}

func NewKafkaFoodOrderProducer(logger logger.Slog, config kafka.Config) (*KafkaFoodOrderProducer, error) {
	client := kafkaProducer.NewProducer(config, "pizzeria.order")

	return &KafkaFoodOrderProducer{
		logger: logger,
		client: client,
	}, nil
}

func (r KafkaFoodOrderProducer) ProduceFoodOrder(ctx context.Context, in food.Order) error {
	r.logger.Info("KafkaFoodOrderProducer.ProduceFoodOrder", in)

	inBytes, err := json.Marshal(in)
	if err != nil {
		return err
	}

	return r.client.Produce(ctx, inBytes)
}

func (r KafkaFoodOrderProducer) ProduceFoodOrderBatch(ctx context.Context, ins []food.Order) error {
	r.logger.Info("KafkaFoodOrderProducer.ProduceFoodOrderBatch", ins)

	var data [][]byte

	for _, in  := range ins {
		inBytes, err := json.Marshal(in)
		if err != nil {
			return err
		}
	
		data = append(data, inBytes)
	}

	return r.client.ProduceBatch(ctx, data)
}
