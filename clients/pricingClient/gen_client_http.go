// AUTOGENERATED! DO NOT EDIT.
package pricingClient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"io"
	"tonky/holistic/clients"
	 "tonky/holistic/domain/food"
	 "tonky/holistic/domain/pricing"
	svcPricing "tonky/holistic/services/pricing"
)

type IPricingClient interface {
	ReadOrder(context.Context, food.OrderID) (pricing.OrderPrice, error)
}

func New(config clients.Config) PricingClient {
	return PricingClient{
		config: config,
	}
}

func NewFromEnv(env string) PricingClient {
	svcConf := svcPricing.MustEnvConfig()

	envConf := clients.ConfigForEnv("pricing", env)
	envConf.Port = svcConf.Port

	return PricingClient{
		config: envConf,
	}
}

type PricingClient struct {
	config clients.Config
}

func (c PricingClient) ReadOrder(ctx context.Context, arg food.OrderID) (pricing.OrderPrice, error) {
	var reply pricing.OrderPrice

	jsonBody, err := json.Marshal(arg)
	if err != nil { return reply, err}

	bodyReader := bytes.NewReader(jsonBody)

 	requestURL := fmt.Sprintf("%s/%s", c.config.ServerAddress(), "GetOrder")

 	req, err := http.NewRequest(http.MethodPost, requestURL, bodyReader)
	if err != nil { return reply, err }

	res, err := http.DefaultClient.Do(req)
	if err != nil { return reply, err }

	resBody, err := io.ReadAll(res.Body)
	if err != nil { return reply, err }

	if err := json.Unmarshal(resBody, &reply); err != nil { return reply, err }

	return reply, nil
}

