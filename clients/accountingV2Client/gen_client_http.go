// AUTOGENERATED! DO NOT EDIT.
package accountingV2Client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"io"
	"tonky/holistic/clients"
	"tonky/holistic/clients/pricingClient"
	svcAccountingV2 "tonky/holistic/services/accountingV2"
)

type IAccountingV2Client interface {
	GetOrderByID(context.Context, foodStore.OrderID) (foodStore.Order, error)
	CreateOrder(context.Context, NewFoodOrder) (foodStore.Order, error)
}

func New(config clients.Config) AccountingV2Client {
	return AccountingV2Client{
		config: config,
	}
}

func NewFromEnv(env string) AccountingV2Client {
	svcConf := svcAccountingV2.MustEnvConfig()

	envConf := clients.ConfigForEnv("accountingV2", env)
	envConf.Port = svcConf.Port

	return AccountingV2Client{
		config: envConf,
	}
}

type AccountingV2Client struct {
	config clients.Config
}

func (c AccountingV2Client) GetOrderByID(ctx context.Context, arg foodStore.OrderID) (foodStore.Order, error) {
	var reply foodStore.Order

	jsonBody, err := json.Marshal(arg)
	if err != nil { return reply, err}

	bodyReader := bytes.NewReader(jsonBody)

 	requestURL := fmt.Sprintf("%s/%s", c.config.ServerAddress(), "GetOrderByIDGetOrderByID")

 	req, err := http.NewRequest(http.MethodPost, requestURL, bodyReader)
	if err != nil { return reply, err }

	res, err := http.DefaultClient.Do(req)
	if err != nil { return reply, err }

	resBody, err := io.ReadAll(res.Body)
	if err != nil { return reply, err }

	if err := json.Unmarshal(resBody, &reply); err != nil { return reply, err }

	return reply, nil
}

func (c AccountingV2Client) CreateOrder(ctx context.Context, arg NewFoodOrder) (foodStore.Order, error) {
	var reply foodStore.Order

	jsonBody, err := json.Marshal(arg)
	if err != nil { return reply, err}

	bodyReader := bytes.NewReader(jsonBody)

 	requestURL := fmt.Sprintf("%s/%s", c.config.ServerAddress(), "CreateOrderCreateOrder")

 	req, err := http.NewRequest(http.MethodPost, requestURL, bodyReader)
	if err != nil { return reply, err }

	res, err := http.DefaultClient.Do(req)
	if err != nil { return reply, err }

	resBody, err := io.ReadAll(res.Body)
	if err != nil { return reply, err }

	if err := json.Unmarshal(resBody, &reply); err != nil { return reply, err }

	return reply, nil
}

