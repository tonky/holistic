// AUTOGENERATED! DO NOT EDIT.
package kafkaConsumer

import (
	"context"
	"encoding/json"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"

	"{{ k.DomainObject.GoImport() }}"
)

// compile-time check to make sure app-level interface is implemented
var _ {{ k.InterfaceName() }} = new({{ k.StructName() }}) 

type {{ k.InterfaceName() }} interface {
	Run(context.Context, func(context.Context, {{ k.ModelName() }}) error) chan error
}

type {{ k.StructName() }} struct {
	logger logger.ILogger
	client IConsumer
}

func New{{ k.StructName() }}Consumer(l logger.ILogger, config kafka.Config) (*{{ k.StructName() }}, error) {
	l.Info("New{{ k.StructName() }}Consumer()", "topic", "{{ k.TopicName }}", "groupID", config.GroupID)

	client := NewConsumer(config, "{{ k.TopicName }}")

	return &{{ k.StructName() }}{
		logger: l,
		client: client,
	}, nil
}

func (c {{ k.StructName() }}) Run(ctx context.Context, processor func(context.Context, {{ k.ModelName() }}) error) chan error {
	c.logger.Info("{{ k.StructName() }}.Run()", "topic", c.client.Topic())

	res := make(chan error)
	models, errors := Consume{{ cap(k.Name) }}(ctx, c.client)

	go func() {
		for {
			select {
			case model := <-models:
				c.logger.Info("kafkaConsumer.{{ k.StructName() }} got model in channel", "model", model)

				if err := processor(ctx, model); err != nil {
					res <- err
				}
			case err := <-errors:
				res <- err
			case <-ctx.Done():
				return
			}
		}
	}()

	return res
}

func Consume{{ cap(k.Name) }}(ctx context.Context, client IConsumer) (chan {{ k.ModelName() }}, chan error) {
	client.Logger().Info("consumer.Consume{{ cap(k.Name) }}", "topic", client.Topic())

	models := make(chan {{ k.ModelName() }})
	errors := make(chan error)

	kafkaMessages, kafkaErrors := client.Consume(context.Background())

	go func() {
		for {
			select {
			case err := <-kafkaErrors:
				errors <- err
			case <-ctx.Done():
				close(models)
				return
			case msg := <-kafkaMessages:
				var model {{ k.ModelName() }}
				if err := json.Unmarshal(msg.Value, &model); err != nil {
					errors <- err
					continue
				}
				models <- model
			}
		}
	}()

	return models, errors
}
