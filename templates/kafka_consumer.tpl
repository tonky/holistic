// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name }}

import (
	"context"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"
	"tonky/holistic/infra/kafkaConsumer"

	{% for imp in k.Imports() %}
	{{ imp.Alias}} "tonky/holistic/{{ imp.RelPath }}"
	{% end %}
)

// compile-time check to make sure app-level interface is implemented
var _ {{ k.InterfaceName() }} = new({{ k.StructName() }}) 

type {{ k.InterfaceName() }} interface {
	Run(context.Context, func(context.Context, {{ k.Model }}) error) chan error
}

type {{ k.StructName() }} struct {
	logger logger.Slog
	client kafkaConsumer.IConsumer
}

func New{{ k.StructName() }}(logger logger.Slog, config kafka.Config) (*{{ k.StructName() }}, error) {
	client := kafkaConsumer.NewConsumer(config, "{{ k.Topic }}")

	return &{{ k.StructName() }}{
		logger: logger,
		client: client,
	}, nil
}

func (c {{ k.StructName() }}) Run(ctx context.Context, processor func(context.Context, {{ k.Model }}) error) chan error {
	res := make(chan error)
	orders, errors := kafkaConsumer.Consume{{ cap(k.Name) }}(c.client)

	go func() {
		for {
			select {
			case order := <-orders:
				c.logger.Info("{{ service.Name }}.{{ k.StructName() }} got order", order)

				if err := processor(ctx, order); err != nil {
					res <- err
				}
			case err := <-errors:
				res <- err
			}
		}
	}()

	return res
}