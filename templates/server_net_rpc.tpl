// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name}}

import (
    "context"
    "fmt"
	"log"
	"net"
	"net/rpc"

    // "github.com/go-playground/validator/v10"
    "github.com/samber/do/v2"

    {% for id in app_deps %}
    {% if id.AppImportPackageName() != "app" %}
	"tonky/holistic/infra/{{ id.PackageName() }}"
    {% end %}
    {% end %}

	{% for imp in service.ClientImports() %}
    {% if imp.Alias == "svc" %}
        {% continue %}
    {% end if %}
	{% if imp.Alias %}{{ imp.Alias }} {% end if %}"tonky/holistic/{{ imp.RelPath }}"
	{% end %}
	app "tonky/holistic/apps/{{ service.Name }}"
	"tonky/holistic/infra/logger"
)

type {{ cap(service.Name) }} struct {
    config Config
    deps do.Injector
    app app.App
}

{% for h in handlers %}
func (h {{ cap(service.Name) }}) {{h.FuncName()}}(arg {{ h.In }}, reply *{{ h.Out.ok }}) error {
    res, err := h.app.{{h.FuncName()}}(context.TODO(), arg{{ h.In.SvcToApp() }})
    if err != nil {
        return err
    }

    *reply = res

    return nil
}

{% end %}

func New(dependencies do.Injector) (ServiceStarter, error) {
	cfg := do.MustInvoke[*Config](dependencies)

    application, appErr := app.NewApp(dependencies)
    if appErr != nil {
        return nil, appErr
    }

    handlers := {{ cap(service.Name) }}{deps: dependencies, config: *cfg, app: *application}

    return handlers, nil
}

func (h {{ cap(service.Name) }}) Start() error {
	port := h.config.Port

    fmt.Printf(">> {{ service.Name }}.Start() config: %+v\n", h.config)

	server := rpc.NewServer()
	server.Register(h)

	fmt.Println(">> starging server on port ", port)

	l, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
    if err != nil {
        log.Fatal("listen error:", err)
    }

	for {
		conn, err := l.Accept()
		if err != nil {
			panic(err)
		}

		go func() {
			server.ServeConn(conn)
		}()
	}
}

func NewFromEnv() (ServiceStarter, error) {
	cfg, err := NewEnvConfig()
    if err != nil {
        return nil, err
    }

    deps := do.New()

	do.ProvideValue(deps, cfg)

    l := logger.Slog{}
	do.ProvideValue(deps, &l)

{% for ad in app_deps %}
	{{ ad.AppVarName() }}, err := {{ ad.AppImportPackageName() }}.New{{ ad.StructName() }}(l, cfg.App.{{ ad.ConfigVarName() }})
    if err != nil {
        return nil, err
    }

	do.ProvideValue(deps, {{ ad.AppVarName() }})
{% end %}
/*
	ocp, err := kafkaProducer.NewFoodOrderCreatedProducer(l, cfg.App.Kafka)
    if err != nil {
        return nil, err
    }

	oup, err := kafkaProducer.NewFoodOrderUpdatedProducer(l, cfg.App.Kafka)
    if err != nil {
        return nil, err
    }

	do.ProvideValue(deps, ocp)
	do.ProvideValue(deps, oup)
*/
    application, appErr := app.NewApp(deps)
    if appErr != nil {
        return nil, appErr
    }

    handlers := {{ cap(service.Name) }}{deps: deps, config: cfg, app: *application}

    return handlers, nil
}

func (h {{ cap(service.Name) }}) Config() Config {
    return h.config
}

func (h {{ cap(service.Name) }}) Deps() do.Injector {
    return h.deps
}


type ServiceStarter interface {
    Start() error
    Config() Config
    Deps() do.Injector
}
