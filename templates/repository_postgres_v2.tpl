// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name }}

import (
	"context"
	"{{ service.Logger.Interface.AbsPath() }}"
	"tonky/holistic/infra/postgres"
    {% for ci in service.Postgres.AbsImports(ctx) %}
	"{{ ci }}"
    {% end %}
)

var _ {{ repo.InterfaceName() }} = new({{ repo.StructName() }})

type {{ repo.InterfaceName() }} interface {
    {% for e in repo.Endpoints %}
    {{ e.Name }}(context.Context{% if e.In %}, {{ e.In.GoQualifiedModel() }}{% end %}) ({% if e.Out %}{{ e.Out.GoQualifiedModel() }}, {% end %}error)
    {% end %}
}

type {{ repo.StructName() }} struct {
    logger {{ service.Logger.Interface.GoQualifiedModel() }}
	client postgres.Client
}

func New{{ repo.StructName() }}(l {{ service.Logger.Interface.GoQualifiedModel() }}, conf postgres.Config) (*{{ repo.StructName() }}, error) {
	client, err := postgres.NewClient(conf)
	if err != nil {
		return nil, err
	}

	return &{{ repo.StructName() }}{
		logger: l,
		client: client,
	}, nil
}
