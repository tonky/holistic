// AUTOGENERATED! DO NOT EDIT.

package {{ service.Name }}

import (
	{% if service.KafkaConsumers %}
	"context"
	{% end %}
	"tonky/holistic/infra/logger"
)

type Deps struct {
	Config Config
	Logger *logger.Slog
{% for ad in app_deps %}
    {{ cap(ad.AppVarName()) }} {{ ad.InterfaceName() }}
{% end %}
}

type App struct {
	Deps       Deps
	Logger     *logger.Slog
}

func NewApp(deps Deps) (App, error) {
	{% if service.KafkaConsumers %}
	ctx := context.Background()

	{% end %}
	app := App{
		Deps:       deps,
		Logger:     deps.Logger,
	}

	{% for consumer in service.KafkaConsumers %}
	go func() {
		for err := range app.{{ consumer.Name }}Consumer.Run(ctx, app.{{ cap(consumer.Name) }}Processor) {
			app.logger.Warn(err.Error())
		}
	}()
	
	{% end %}
	return app, nil
}
