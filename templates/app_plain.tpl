// AUTOGENERATED! DO NOT EDIT.

package {{ service.Name }}

import (
	{% if service.KafkaConsumers %}
	"context"
	{% end %}
	{% if service.KafkaProducers %}
	"tonky/holistic/infra/kafkaProducer"
	{% end %}
	{% for d in client_deps %}
	"tonky/holistic/clients/{{ d.AppVarName() }}"
	{% end %}
	"tonky/holistic/infra/logger"
)

type Deps struct {
	Config Config
	Logger *logger.Slog
{% for ad in app_deps %}
    {{ cap(ad.AppVarName()) }} {{ ad.InterfaceName() }}
{% end %}
}

{% if client_deps %}
type Clients struct {
{% for d in client_deps.Dedup() %}
    {{ cap(d.AppVarName()) }} {{ d.AppVarName() }}.{{ d.InterfaceName() }}
{% end %}
}
{% end %}

type App struct {
	Deps		Deps
{% if client_deps %}
	Clients		Clients
{% end %}
	Logger		*logger.Slog
}

{% if client_deps %}
func NewApp(deps Deps, clients Clients) (App, error) {
{% else %}
func NewApp(deps Deps) (App, error) {
{% end %}
	if deps.Logger == nil {
		deps.Logger = &logger.Slog{}
	}

	{% if service.KafkaConsumers %}
	ctx := context.Background()

	{% end %}
	app := App{
		Deps:       deps,
		Logger:     deps.Logger,
{% if client_deps %}
		Clients: 	clients,
{% end %}
	}

	{% for consumer in service.KafkaConsumers %}
	go func() {
		for err := range app.{{ consumer.Name }}Consumer.Run(ctx, app.{{ cap(consumer.Name) }}Processor) {
			app.logger.Warn(err.Error())
		}
	}()
	
	{% end %}
	return app, nil
}
