// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name}}

import (
    "context"
	"net/http"
    "encoding/json"

	"github.com/go-chi/chi/v5"

	app "tonky/holistic/apps/{{ service.Name }}"
)

type handlers struct {
    config Config
    app app.App
}

{% for h in handlers %}
func (h handlers) {{h.FuncName()}}() http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        var in {{ h.In }}

        if err := json.NewDecoder(r.Body).Decode(&in); err != nil {
            http.Error(w, err.Error(), http.StatusBadRequest)
            return
        }

        appArg, err := in.ToApp()
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        respModel, err := h.app.{{h.FuncName()}}(context.TODO(), appArg)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        byteResp, err := json.Marshal(respModel)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        w.Write(byteResp)
    }
}

{% end %}

func New{{ cap(service.Name) }}(conf Config, deps app.Deps, clients app.Clients) (*chi.Mux, error) {
	a, err := app.NewApp(deps, clients)
	if err != nil {
		panic(err)
	}

	h := handlers{app: a, config: conf}

	r := chi.NewRouter()

    {% for h in handlers%}
	r.Post("/{{ h.Method.HttpName() }}{{ cap(h.Name) }}", h.{{h.FuncName()}}())
    {% end %}

    return r, nil
}
