// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name}}

import (
    "context"
    "fmt"
	"net/http"
    "encoding/json"

	"github.com/go-chi/chi/v5"

	app "tonky/holistic/apps/{{ service.Name }}"

	{% if service.KafkaProducers %}
	"tonky/holistic/infra/kafkaProducer"
	{% end %}
	{% if service.KafkaConsumers %}
	"tonky/holistic/infra/kafkaConsumer"
	{% end %}
    {% for id in app_deps %}
        {% if id.AppImportPackageName() == "app" %}
        {% else if id.PackageName() == "local" %} 
        {% else if id.PackageName() == "kafkaProducer" %} 
        {% else if id.PackageName() == "kafkaConsumer" %} 
        {% else %}
	"tonky/holistic/infra/{{ id.PackageName() }}"
        {% end %}
    {% end %}
	{% for imp in service.ClientImports() %}
    {% if imp.Alias == "svc" %}
        {% continue %}
    {% end if %}
	{% if imp.Alias %}{{ imp.Alias }} {% end if %}"tonky/holistic/{{ imp.RelPath }}"
	{% end %}
	"tonky/holistic/infra/slogLogger"
)

type handlers struct {
    config Config
    app app.App
    deps app.Deps
    mux *chi.Mux
}

{% for h in handlers %}
func (h handlers) {{h.FuncName()}}() http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        var in {{ h.In }}
        var out {{ h.Out.ok }}

        if err := json.NewDecoder(r.Body).Decode(&in); err != nil {
            http.Error(w, err.Error(), http.StatusBadRequest)
            return
        }

        var appErr error

        out, appErr = h.app.{{h.FuncName()}}(context.TODO(), in)
        if appErr != nil {
            http.Error(w, appErr.Error(), http.StatusInternalServerError)
            return
        }

        byteResp, err := json.Marshal(out)
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        w.Write(byteResp)
    }
}

{% end %}

{% if client_deps %}
func NewMux(conf Config, deps app.Deps, clients app.Clients) (*chi.Mux, error) {
	a, err := app.NewApp(deps, clients)
{% else %}
func NewMux(conf Config, deps app.Deps) (*chi.Mux, error) {
	a, err := app.NewApp(deps)
{% end %}
	if err != nil {
		panic(err)
	}

	r := chi.NewRouter()

    h := handlers{deps: deps, app: a, config: conf, mux: r}

    {% for h in handlers%}
	r.Post("/{{ h.Method.HttpName() }}{{ cap(h.Name) }}", h.{{h.FuncName()}}())
    {% end %}

    return r, nil
}

func NewFromEnv() (ServiceStarter, error) {
	cfg, err := NewEnvConfig()
    if err != nil {
        return nil, err
    }

{% if service.Dependencies == "plain_struct" %}
    deps := app.Deps{
        Logger: slogLogger.Default(),
    }

    {% for ad in app_deps %}
	{{ ad.AppVarName() }}, err := {% if ad.PackageName() != "local" %}{{ ad.AppImportPackageName() }}.{% else %}app.{% end %}New{{ ad.StructName() }}(deps.Logger, cfg.App.{{ ad.ConfigVarName() }})
    if err != nil {
        return nil, err
    }
	deps.{{ cap(ad.AppVarName()) }} = {{ ad.AppVarName() }}
    {% end for %}
{% else if service.Dependencies == "samber_do" %}
    deps := app.Deps{}
{% end if %}
{% if client_deps %}
    {% for d in client_deps.Dedup() %}
    app.{{ cap(d.AppVarName()) }} = clients.New{{ cap(d.AppVarName()) }}(cfg.Environment)
    {% end %}
{% end %}

{% if client_deps %}
    application, appErr := app.NewApp(deps, clients)
{% else %}
    application, appErr := app.NewApp(deps)
{% end %}
    if appErr != nil {
        return nil, appErr
    }

{% if client_deps %}
    mux, err := NewMux(cfg, deps, clients)
{% else %}
    mux, err := NewMux(cfg, deps)
{% end %}
    if err != nil { return nil, err}

    handlers := handlers{config: cfg, app: application, deps: deps, mux: mux}

    return handlers, nil
}

func (h handlers) Config() Config {
    return h.config
}

func (h handlers) Start() error {
    fmt.Printf(">> {{ service.Name }}.Start() config: %+v\n", h.config)
	{% if service.KafkaConsumers %}
    h.app.RunConsumers()
    {% end %}

    return http.ListenAndServe(fmt.Sprintf(":%d", h.config.Port), h.mux)
}

func (h handlers) Deps() app.Deps {
    return h.deps
}

func (h handlers) Mux() *chi.Mux {
    return h.mux
}

type ServiceStarter interface {
    Start() error
    Config() Config
    Deps() app.Deps
    Mux() *chi.Mux
}
