// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name }}Client


import (
	"context"
	"log"
	"net/rpc"
	"tonky/holistic/clients"
	{% for imp in client_relative_imports %}
	{{ imp.Alias}} "tonky/holistic/{{ imp.RelPath }}"
	{% end %}
)

type I{{ cap(service.Name) }}Client interface {
{% for h in handlers %}
	{{ h.FuncName() }}(context.Context, {{ h.In.ServiceModel() }}) ({{ h.Out.ok }}, error)
{% end %}
}

func New(config clients.Config) {{ cap(service_name) }}Client {
	return {{ cap(service_name) }}Client{
		config: config,
	}
}

type {{ cap(service_name) }}Client struct {
	config clients.Config
}

{% for h in handlers %}
func (c {{ cap(service_name) }}Client) {{ h.FuncName() }}(ctx context.Context, req {{ h.In.ServiceModel() }}) ({{ h.Out.ok }}, error) {
	client, err := rpc.Dial("tcp", c.config.ServerAddress())
	if err != nil {
		log.Fatal("dialing error:", err)
	}

	var reply {{ h.Out.ok }}

	err = client.Call("{{ cap(service_name) }}.{{ h.FuncName() }}", req, &reply)
	if err != nil {
		log.Fatal("server call error:", err)
	}

	return reply, nil
}

{% end %}