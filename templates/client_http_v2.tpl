// AUTOGENERATED! DO NOT EDIT.
package {{ service.Name }}Client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"io"
	"tonky/holistic/clients"
	{% for c in service.Clients %}
	"{{ modulePath }}/{{ c.Model.RelPath() }}"
	{% end %}
	svc{{ cap(service.Name ) }} "{{ modulePath }}/services/{{ service.Name }}"
)

type I{{ cap(service.Name) }}Client interface {
{% for h in service.Endpoints %}
	{{ h.Name }}(context.Context, {{ h.In.GoQualifiedModel() }}) ({{ h.Out.GoQualifiedModel() }}, error)
{% end %}
}

func New(config clients.Config) {{ cap(service.Name) }}Client {
	return {{ cap(service.Name) }}Client{
		config: config,
	}
}

func NewFromEnv(env string) {{ cap(service.Name) }}Client {
	svcConf := svc{{ cap(service.Name ) }}.MustEnvConfig()

	envConf := clients.ConfigForEnv("{{ service.Name }}", env)
	envConf.Port = svcConf.Port

	return {{ cap(service.Name) }}Client{
		config: envConf,
	}
}

type {{ cap(service.Name) }}Client struct {
	config clients.Config
}

{% for h in service.Endpoints %}
func (c {{ cap(service.Name) }}Client) {{ h.Name }}(ctx context.Context, arg {{ h.In.GoQualifiedModel() }}) ({{ h.Out.GoQualifiedModel() }}, error) {
	var reply {{ h.Out.GoQualifiedModel() }}

	jsonBody, err := json.Marshal(arg)
	if err != nil { return reply, err}

	bodyReader := bytes.NewReader(jsonBody)

 	requestURL := fmt.Sprintf("%s/%s", c.config.ServerAddress(), "{{ h.Name }}{{ cap(h.Name) }}")

 	req, err := http.NewRequest(http.MethodPost, requestURL, bodyReader)
	if err != nil { return reply, err }

	res, err := http.DefaultClient.Do(req)
	if err != nil { return reply, err }

	resBody, err := io.ReadAll(res.Body)
	if err != nil { return reply, err }

	if err := json.Unmarshal(resBody, &reply); err != nil { return reply, err }

	return reply, nil
}

{% end %}