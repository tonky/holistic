// AUTOGENERATED! DO NOT EDIT.

package {{ service.Name }}

import (
	"{{ modulePath }}/infra/logger"
	{% if service.KafkaProducers %}
	"{{ modulePath }}/infra/kafkaProducer"
	{% end %}
	{% if service.KafkaConsumers %}
	"{{ modulePath }}/infra/kafkaConsumer"
	"context"
	{% end %}
	{% for c in service.Clients %}
	"{{ modulePath }}/clients/{{ c.Name }}"
	{% end %}
)

{% if service.Clients  %}
type Clients struct {
	{% for c in service.Clients %}
    {{ cap(c.Name) }} {{ c.Name }}.I{{ cap(c.Name) }}
	{% end %}
}
{% end %}

type Deps struct {
	Config Config
	Logger *logger.Slog
	{% for ad in app_deps %}
    {{ cap(ad.AppVarName()) }} {{ ad.InterfaceName() }}
	{% end %}
}

type App struct {
	Deps       Deps
	Logger     *logger.Slog
{% if service.Clients  %}
	Clients		Clients
{% end %}
}

{% if service.Clients  %}
func NewApp(deps Deps, clients Clients) (*App, error) {
{% else %}
func NewApp(deps Deps) (*App, error) {
{% end %}
	app := App{
		Deps:       deps,
	{% if service.Clients  %}
		Clients: clients,
	{% end %}
		Logger:     deps.Logger,
	}

	return &app, nil
}

{% if service.KafkaConsumers %}
func (a App) RunConsumers() {
	a.Logger.Info(">> {{ service.Name}}.App.RunConsumers()")

	ctx := context.Background()
	{% for consumer in service.KafkaConsumers %}

	go func() {
		{% if service.Dependencies == "samber_do" %}
		for err := range a.{{ cap(consumer.Name) }}Consumer.Run(ctx, a.{{ cap(consumer.Name) }}Processor) {
		{% else if service.Dependencies == "plain_struct" %}
		for err := range a.Deps.{{ cap(consumer.Name) }}Consumer.Run(ctx, a.{{ cap(consumer.Name) }}Processor) {
		{% end %}
			a.Logger.Warn(err.Error())
		}
	}()
	{% end %}
}
{% end %}