// AUTOGENERATED! DO NOT EDIT.

package {{ service.Name }}

import (
	"{{ service.Logger.Interface.AbsPath() }}"
	"{{ service.Logger.Model.AbsPath() }}"
	{% if service.KafkaProducers %}
	"{{ modulePath }}/infra/kafkaProducer"
	{% end %}
	{% if service.KafkaConsumers %}
	"{{ modulePath }}/infra/kafkaConsumer"
	"context"
	{% end %}
	{% for c in service.Clients %}
	"{{ modulePath }}/clients/{{ c.Name }}"
	{% end %}
)

{% if service.Clients  %}
type Clients struct {
	{% for c in service.Clients %}
    {{ cap(c.Name) }} {{ c.Name }}.I{{ cap(c.Name) }}
	{% end %}
}
{% end %}

type Deps struct {
	Config Config
    Logger {{ service.Logger.Interface.GoQualifiedModel() }}
	{% for ad in app_deps %}
    {{ cap(ad.AppVarName()) }} {{ ad.InterfaceName() }}
	{% end %}
	{% for pg in service.Postgres %}
    {{ pg.Name }} I{{ pg.Name }}
	{% end %}
{% if service.Clients  %}
	Clients		Clients
{% end %}
}

type App struct {
	Deps       Deps
}

func NewApp(deps Deps) (*App, error) {
	deps.Logger = deps.Logger.With("app", "{{ service.Name }}")

	app := App{
		Deps: deps,
	}

	return &app, nil
}

func MustDepsFromEnv() Deps {
	l := {{ service.Logger.Model.Package() }}.Default().With("app", "{{ service.Name }}")

    l.Debug("MustDepsFromenv()")

	cfg := MustEnvConfig()

	deps, err := DepsFromConf(cfg)
	if err != nil {
    	l.Error("DepsFromConf error", "config", cfg, "err", err)
	}

	return deps
}

func DepsFromConf(cfg Config) (Deps, error) {
	l := {{ service.Logger.Model.Package() }}.Default().With("app", "{{ service.Name }}")

    l.Debug("DepsFromConf()", "config", cfg)

    deps := Deps{
		Logger: l,
	}

    {% for pg in service.Postgres %}
    {{ pg.Name}}, err := New{{ pg.Name }}(l, cfg.{{ pg.Name }})
    if err != nil {
        return deps, err
    }

    deps.{{ pg.Name }} = {{ pg.Name }}
    {% end %}

    {% for ad in app_deps %}
	{{ ad.AppVarName() }}, err := {% if ad.PackageName() != "local" %}{{ ad.AppImportPackageName() }}.{% else %}app.{% end %}New{{ ad.StructName() }}(l, cfg.{{ ad.ConfigVarName() }})
    if err != nil {
        return deps, err
    }
	deps.{{ cap(ad.AppVarName()) }} = {{ ad.AppVarName() }}
    {% end for %}

{% if service.Clients %}
    deps.Clients = Clients{
    {% for c in service.Clients %}
        {{ cap(c.Name) }}: {{ c.Model.Package() }}.NewFromEnv(cfg.Environment),
    {% end %}
    }
{% end %}

    return deps, nil
}

{% if service.KafkaConsumers %}
func (a App) RunConsumers() {
	a.Deps.Logger.Info("RunConsumers()")

	ctx := context.Background()
	{% for consumer in service.KafkaConsumers %}

	go func() {
		for err := range a.Deps.{{ cap(consumer.Name) }}Consumer.Run(ctx, a.{{ cap(consumer.Name) }}Processor) {
			a.Deps.Logger.Error(err.Error())
		}
	}()
	{% end %}
}
{% end %}