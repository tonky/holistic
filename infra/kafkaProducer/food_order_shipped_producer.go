// AUTOGENERATED! DO NOT EDIT.
package kafkaProducer

import (
	"context"
	"encoding/json"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"

	"tonky/holistic/domain/accounting"
)

// compile-time check to make sure app-level interface is implemented
var _ IFoodOrderShipped = new(FoodOrderShipped) 

type IFoodOrderShipped interface {
	ProduceFoodOrderShipped(context.Context, accounting.Order) error
	ProduceFoodOrderShippedBatch(context.Context, []accounting.Order) error
}

type FoodOrderShipped struct {
	logger logger.Slog
	client IProducer
}

func NewFoodOrderShippedProducer(logger logger.Slog, config kafka.Config) (*FoodOrderShipped, error) {
	client := NewProducer(config, "food.order.shipped")

	return &FoodOrderShipped{
		logger: logger,
		client: client,
	}, nil
}

func (r FoodOrderShipped) ProduceFoodOrderShipped(ctx context.Context, in accounting.Order) error {
	r.logger.Info("FoodOrderShipped.ProduceFoodOrderShipped", in)

	inBytes, err := json.Marshal(in)
	if err != nil {
		return err
	}

	return r.client.Produce(ctx, inBytes)
}

func (r FoodOrderShipped) ProduceFoodOrderShippedBatch(ctx context.Context, ins []accounting.Order) error {
	r.logger.Info("FoodOrderShipped.ProduceFoodOrderShippedBatch", ins)

	var data [][]byte

	for _, in  := range ins {
		inBytes, err := json.Marshal(in)
		if err != nil {
			return err
		}
	
		data = append(data, inBytes)
	}

	return r.client.ProduceBatch(ctx, data)
}
