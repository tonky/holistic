// AUTOGENERATED! DO NOT EDIT.
package kafkaProducer

import (
	"context"
	"encoding/json"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"

	"tonky/holistic/domain/food"
)

// compile-time check to make sure app-level interface is implemented
var _ IFoodOrderCreated = new(FoodOrderCreated) 

type IFoodOrderCreated interface {
	ProduceFoodOrderCreated(context.Context, food.Order) error
	ProduceFoodOrderCreatedBatch(context.Context, []food.Order) error
}

type FoodOrderCreated struct {
	logger logger.Slog
	client IProducer
}

func NewFoodOrderCreatedProducer(logger logger.Slog, config kafka.Config) (*FoodOrderCreated, error) {
	client := NewProducer(config, "food.order.created")

	return &FoodOrderCreated{
		logger: logger,
		client: client,
	}, nil
}

func (r FoodOrderCreated) ProduceFoodOrderCreated(ctx context.Context, in food.Order) error {
	r.logger.Info("FoodOrderCreated.ProduceFoodOrderCreated", in)

	inBytes, err := json.Marshal(in)
	if err != nil {
		return err
	}

	return r.client.Produce(ctx, inBytes)
}

func (r FoodOrderCreated) ProduceFoodOrderCreatedBatch(ctx context.Context, ins []food.Order) error {
	r.logger.Info("FoodOrderCreated.ProduceFoodOrderCreatedBatch", ins)

	var data [][]byte

	for _, in  := range ins {
		inBytes, err := json.Marshal(in)
		if err != nil {
			return err
		}
	
		data = append(data, inBytes)
	}

	return r.client.ProduceBatch(ctx, data)
}
