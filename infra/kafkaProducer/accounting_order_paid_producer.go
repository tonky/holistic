// AUTOGENERATED! DO NOT EDIT.
package kafkaProducer

import (
	"context"
	"encoding/json"
	"tonky/holistic/infra/logger"
	"tonky/holistic/infra/kafka"

	"tonky/holistic/domain/accounting"
)

// compile-time check to make sure app-level interface is implemented
var _ IAccountingOrderPaid = new(AccountingOrderPaid) 

type IAccountingOrderPaid interface {
	ProduceAccountingOrderPaid(context.Context, accounting.Order) error
	ProduceAccountingOrderPaidBatch(context.Context, []accounting.Order) error
}

type AccountingOrderPaid struct {
	logger logger.Slog
	client IProducer
}

func NewAccountingOrderPaidProducer(logger logger.Slog, config kafka.Config) (*AccountingOrderPaid, error) {
	client := NewProducer(config, "accounting.order.paid")

	return &AccountingOrderPaid{
		logger: logger,
		client: client,
	}, nil
}

func (r AccountingOrderPaid) ProduceAccountingOrderPaid(ctx context.Context, in accounting.Order) error {
	r.logger.Info("AccountingOrderPaid.ProduceAccountingOrderPaid", in)

	inBytes, err := json.Marshal(in)
	if err != nil {
		return err
	}

	return r.client.Produce(ctx, inBytes)
}

func (r AccountingOrderPaid) ProduceAccountingOrderPaidBatch(ctx context.Context, ins []accounting.Order) error {
	r.logger.Info("AccountingOrderPaid.ProduceAccountingOrderPaidBatch", ins)

	var data [][]byte

	for _, in  := range ins {
		inBytes, err := json.Marshal(in)
		if err != nil {
			return err
		}
	
		data = append(data, inBytes)
	}

	return r.client.ProduceBatch(ctx, data)
}
