package generator

import (
	"bytes"
	"testing"
	"tonky/holistic/typs"

	"github.com/stretchr/testify/require"
)

var tplPath = "/home/tonky/Mine/personal/holistic/templates"

func TestGenComplex(t *testing.T) {
	buf := bytes.NewBuffer([]byte{})
	sg := ServiceGen{TemplatePath: tplPath}

	require.NoError(t, sg.WriteModel2(domainOrderDelivery, buf))

	code := buf.String()
	want := `// AUTOGENERATED! DO NOT EDIT.
package delivery

import (
    "github.com/google/uuid"
    "tonky/holistic/domain/assortment"
    "tonky/holistic/domain/order"
    "time"
)

type Delivery struct {
    DeliveryID uuid.UUID
    MealID assortment.MealID
    OrderID order.OrderID
    PackagingDuration time.Duration
    DeliveredAt time.Time
    DeliveryAttempts DeliveryAttempts
    DeliveryFloor int
}
`
	require.Equal(t, want, code)
}

func TestGenStruct(t *testing.T) {
	buf := bytes.NewBuffer([]byte{})
	sg := ServiceGen{TemplatePath: tplPath}

	require.NoError(t, sg.WriteModel2(domainFoodOrder, buf))

	code := buf.String()
	want := `// AUTOGENERATED! DO NOT EDIT.
package order

import (
    "tonky/holistic/domain/assortment"
)

type Order struct {
    OrderID OrderID
    MealID assortment.MealID
}
`
	require.Equal(t, want, code)
}

func TestGenBasic(t *testing.T) {
	buf := bytes.NewBuffer([]byte{})
	sg := ServiceGen{TemplatePath: tplPath}

	require.NoError(t, sg.WriteModel2(domainFoodOrderID, buf))

	code := buf.String()
	want := `// AUTOGENERATED! DO NOT EDIT.
package order

import (
    "github.com/google/uuid"
)

type OrderID uuid.UUID
`
	require.Equal(t, want, code)
}

func TestGenBuiltin(t *testing.T) {
	buf := bytes.NewBuffer([]byte{})

	sg := ServiceGen{TemplatePath: tplPath}

	require.NoError(t, sg.WriteModel2(domainDeliveryAttempts, buf))

	code := buf.String()
	want := `// AUTOGENERATED! DO NOT EDIT.
package delivery

type DeliveryAttempts int
`
	require.Equal(t, want, code)
}

func TestGenExternal(t *testing.T) {
	buf := bytes.NewBuffer([]byte{})

	sg := ServiceGen{TemplatePath: tplPath}

	require.NoError(t, sg.WriteModel2(depsKafka, buf))

	code := buf.String()
	want := `// AUTOGENERATED! DO NOT EDIT.
package deliverer

import (
    "tonky/holistic/infra/kafkaConsumer"
)

type Dependencies struct {
    PaidOrderConsumer kafkaConsumer.IPaidOrderConsumer
}
`
	require.Equal(t, want, code)
}

var depsKafka = typs.Object3{
	Kind:         typs.KindBuiltIn,
	Typ:          typs.Struct2,
	Name:         "Dependencies",
	RelativePath: []string{"services", "deliverer"},
	Fields:       []typs.Object3{kafkaConsumer},
	Module:       "tonky/holistic",
}

var kafkaConsumer = typs.Object3{
	Kind:         typs.KindExternal,
	Name:         "IPaidOrderConsumer",
	ImportAlias:  "PaidOrderConsumer",
	RelativePath: []string{"infra", "kafkaConsumer"},
	Module:       "tonky/holistic",
}

var domainDeliveryAttempts = typs.Object3{
	Typ:          typs.Int2,
	Kind:         typs.KindDomain,
	Name:         "DeliveryAttempts",
	RelativePath: []string{"domain", "delivery"},
	Module:       "tonky/holistic",
}

var domainFoodOrderID = typs.Object3{
	Typ:          typs.UUID2,
	Kind:         typs.KindDomain,
	Name:         "OrderID",
	RelativePath: []string{"domain", "order"},
	Module:       "tonky/holistic",
}

var domainFoodOrder = typs.Object3{
	Typ:          typs.Struct2,
	Kind:         typs.KindDomain,
	Name:         "Order",
	RelativePath: []string{"domain", "order"},
	Module:       "tonky/holistic",
	Fields:       []typs.Object3{domainFoodOrderID, domainAssortmentMealID},
}

var domainAssortmentMealID = typs.Object3{
	Typ:          typs.UUID2,
	Kind:         typs.KindDomain,
	Name:         "MealID",
	RelativePath: []string{"domain", "assortment"},
	Module:       "tonky/holistic",
}

var domainOrderDelivery = typs.Object3{
	Typ:          typs.Struct2,
	Kind:         typs.KindDomain,
	Name:         "Delivery",
	RelativePath: []string{"domain", "delivery"},
	Module:       "tonky/holistic",
	Fields: []typs.Object3{
		{
			Name: "DeliveryID",
			Typ:  typs.UUID2,
			Kind: typs.KindBasic,
		},
		domainAssortmentMealID,
		domainFoodOrderID,
		{
			Name: "PackagingDuration",
			Typ:  typs.Duration2,
			Kind: typs.KindBasic,
		},
		{
			Name: "DeliveredAt",
			Typ:  typs.Time2,
			Kind: typs.KindBasic,
		},
		domainDeliveryAttempts,
		{
			Name: "DeliveryFloor",
			Typ:  typs.Int2,
			Kind: typs.KindBuiltIn,
		},
	},
}
