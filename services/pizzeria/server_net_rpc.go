// AUTOGENERATED! DO NOT EDIT.
package pizzeria

import (
    "context"
    "fmt"
	"log"
	"net"
	"net/rpc"

    // "github.com/go-playground/validator/v10"
    "github.com/samber/do/v2"

	"tonky/holistic/domain/food"
	app "tonky/holistic/apps/pizzeria"
)

type Pizzeria struct {
    config Config
    deps do.Injector
    app app.App
}

func (h Pizzeria) ReadOrder(arg food.OrderID, reply *food.Order) error {
    res, err := h.app.ReadOrder(context.TODO(), arg)
    if err != nil {
        return err
    }

    *reply = res

    return nil
}

func (h Pizzeria) CreateOrder(arg NewOrder, reply *food.Order) error {
    res, err := h.app.CreateOrder(context.TODO(), arg.ToApp())
    if err != nil {
        return err
    }

    *reply = res

    return nil
}

func (h Pizzeria) UpdateOrder(arg UpdateOrder, reply *food.Order) error {
    res, err := h.app.UpdateOrder(context.TODO(), arg.ToApp())
    if err != nil {
        return err
    }

    *reply = res

    return nil
}


func NewPizzeria(dependencies do.Injector) (ServiceStarter, error) {
	cfg := do.MustInvoke[*Config](dependencies)

    application, appErr := app.NewApp(dependencies)
    if appErr != nil {
        return nil, appErr
    }

    handlers := Pizzeria{deps: dependencies, config: *cfg, app: *application}

    return handlers, nil
}

func (h Pizzeria) Start() error {
	port := h.config.Port

    fmt.Printf(">> pizzeria.Start() config: %+v\n", h.config)

	server := rpc.NewServer()
	server.Register(h)

	fmt.Println(">> starging server on port ", port)

	l, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
    if err != nil {
        log.Fatal("listen error:", err)
    }

	for {
		conn, err := l.Accept()
		if err != nil {
			panic(err)
		}

		go func() {
			server.ServeConn(conn)
		}()
	}
}

type ServiceStarter interface {
    Start() error
}
