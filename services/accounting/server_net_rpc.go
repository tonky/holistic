// AUTOGENERATED! DO NOT EDIT.
package accounting

import (
    "context"
    "fmt"
	"log"
	"net"
	"net/http"
	"net/rpc"

    // "github.com/go-playground/validator/v10"
    "github.com/samber/do/v2"

	"tonky/holistic/domain/food"
	"tonky/holistic/apps/accounting"
)

type Accounting struct {
    config Config
    deps do.Injector
    app accounting.App
}

func (h Accounting) ReadOrder(arg food.OrderID, reply *accounting.Order) error {
    res, err := h.app.ReadOrder(context.TODO(), arg)
    if err != nil {
        return err
    }

    *reply = res

    return nil
}


func NewAccounting(dependencies do.Injector) (ServiceStarter, error) {
	cfg := do.MustInvoke[*Config](dependencies)

    application, appErr := accounting.NewApp(dependencies)
    if appErr != nil {
        return nil, appErr
    }

    handlers := Accounting{deps: dependencies, config: *cfg, app: *application}

    return handlers, nil
}

func (h Accounting) Start() error {
	port := h.config.Port

    fmt.Printf(">> accounting.Start() config: %+v\n", h.config)

	rpc.Register(h)
	rpc.HandleHTTP()

	fmt.Println(">> starging server on port ", port)

	l, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
    if err != nil {
        log.Fatal("listen error:", err)
    }

    return http.Serve(l, nil)
}

type ServiceStarter interface {
    Start() error
}
